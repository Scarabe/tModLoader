--- src/TerrariaNetCore/ReLogic/Content/RejectedAssetCollection.cs
+++ src/tModLoader/ReLogic/Content/RejectedAssetCollection.cs
@@ -2,26 +_,37 @@
 
 namespace ReLogic.Content;
 
+//TML: Added locks to about every method here.
 public class RejectedAssetCollection
 {
 	private Dictionary<string, IRejectionReason> _rejectedAssetsAndReasons = new Dictionary<string, IRejectionReason>();
 
 	public void Reject(string assetPath, IRejectionReason reason)
 	{
-		_rejectedAssetsAndReasons.Add(assetPath, reason);
+		lock (_rejectedAssetsAndReasons) {
+			_rejectedAssetsAndReasons.Add(assetPath, reason);
+		}
 	}
 
-	public bool IsRejected(string assetPath) => _rejectedAssetsAndReasons.ContainsKey(assetPath);
+	public bool IsRejected(string assetPath) {
+		lock (_rejectedAssetsAndReasons) {
+			return _rejectedAssetsAndReasons.ContainsKey(assetPath);
+		}
+	}
 
 	public void Clear()
 	{
-		_rejectedAssetsAndReasons.Clear();
+		lock (_rejectedAssetsAndReasons) {
+			_rejectedAssetsAndReasons.Clear();
+		}
 	}
 
 	public bool TryGetRejections(List<string> rejectionReasons)
 	{
-		foreach (KeyValuePair<string, IRejectionReason> rejectedAssetsAndReason in _rejectedAssetsAndReasons) {
-			rejectionReasons.Add(rejectedAssetsAndReason.Value.GetReason());
+		lock (_rejectedAssetsAndReasons) {
+			foreach (KeyValuePair<string, IRejectionReason> rejectedAssetsAndReason in _rejectedAssetsAndReasons) {
+				rejectionReasons.Add(rejectedAssetsAndReason.Value.GetReason());
+			}
 		}
 
 		return _rejectedAssetsAndReasons.Count > 0;
