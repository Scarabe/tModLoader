--- src/TerrariaNetCore/ReLogic/Content/Sources/XnaDirectContentSource.cs
+++ src/tModLoader/ReLogic/Content/Sources/XnaDirectContentSource.cs
@@ -1,23 +_,35 @@
 using System;
-using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 
 namespace ReLogic.Content.Sources;
 
+//TML: Now derives from ContentSource instead of IContentSource
-public class XnaDirectContentSource : IContentSource
+public class XnaDirectContentSource : ContentSource
 {
 	private readonly string _rootDirectory;
+
+	/*
 	private readonly HashSet<string> _files = new HashSet<string>();
 	private readonly RejectedAssetCollection _rejections = new RejectedAssetCollection();
 
 	public IContentValidator ContentValidator { get; set; }
+	*/
 
 	public XnaDirectContentSource(string rootDirectory)
 	{
 		_rootDirectory = AssetPathHelper.CleanPath(rootDirectory);
+
+		/*
 		BuildFileMap();
+		*/
+		SetAssetNames(
+			Directory.GetFiles(_rootDirectory, "*.xnb", SearchOption.AllDirectories)
+			.Select(path => path.Substring(_rootDirectory.Length+1))
+		);
 	}
 
+	/*
 	private void BuildFileMap()
 	{
 		_files.Clear();
@@ -49,10 +_,16 @@
 	}
 
 	public string GetExtension(string assetName) => ".xnb";
+	*/
 
+	//TML: Made this an override.
-	public Stream OpenStream(string assetName)
+	public override Stream OpenStream(string assetName)
 	{
+		/*
 		string path = Path.Combine(_rootDirectory, assetName) + ".xnb";
+		*/
+		string path = Path.Combine(_rootDirectory, assetName);
+
 		try {
 			return File.OpenRead(path);
 		}
@@ -61,6 +_,7 @@
 		}
 	}
 
+	/*
 	public void RejectAsset(string assetName, IRejectionReason reason)
 	{
 		_rejections.Reject(assetName, reason);
@@ -72,4 +_,5 @@
 	}
 
 	public bool TryGetRejections(List<string> rejectionReasons) => _rejections.TryGetRejections(rejectionReasons);
+	*/
 }
