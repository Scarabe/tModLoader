--- src/TerrariaNetCore/Terraria/GameContent/Liquid/LiquidRenderer.cs
+++ src/tModLoader/Terraria/GameContent/Liquid/LiquidRenderer.cs
@@ -70,7 +_,7 @@
 	private static readonly byte[] VISCOSITY_MASK = new byte[5] { 0, 200, 240, 0, 0 };
 	public const float MIN_LIQUID_SIZE = 0.25f;
 	public static LiquidRenderer Instance;
-	private readonly Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[15];
+	public Asset<Texture2D>[] _liquidTextures = new Asset<Texture2D>[15]; //TML: Publicized, made writeable.
 	private LiquidCache[] _cache = new LiquidCache[1];
 	private LiquidDrawCache[] _drawCache = new LiquidDrawCache[1];
 	private SpecialLiquidDrawCache[] _drawCacheForShimmer = new SpecialLiquidDrawCache[1];
@@ -80,7 +_,9 @@
 	private Color[] _waveMask = new Color[1];
 	private float _frameState;
 
+	/*
 	private static Tile[,] Tiles => Main.tile;
+	*/
 
 	public event Action<Color[], Rectangle> WaveFilters;
 
@@ -115,14 +_,15 @@
 		if (_waveMask.Length < drawArea.Width * drawArea.Height)
 			_waveMask = new Color[drawArea.Width * drawArea.Height];
 
-		Tile tile = null;
+		Tile tile = default;
+
 		fixed (LiquidCache* ptr = &_cache[1]) {
 			LiquidCache* ptr2 = ptr;
 			int num = rectangle.Height * 2 + 2;
 			ptr2 = ptr;
 			for (int i = rectangle.X; i < rectangle.X + rectangle.Width; i++) {
 				for (int j = rectangle.Y; j < rectangle.Y + rectangle.Height; j++) {
-					tile = Tiles[i, j];
+					tile = Main.tile[i, j];
 					if (tile == null)
 						tile = new Tile();
 
