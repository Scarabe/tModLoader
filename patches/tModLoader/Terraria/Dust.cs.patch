--- src/TerrariaNetCore/Terraria/Dust.cs
+++ src/tModLoader/Terraria/Dust.cs
@@ -2,7 +_,10 @@
 using Microsoft.Xna.Framework;
+using Terraria.DataStructures;
 using Terraria.GameContent;
 using Terraria.GameContent.Events;
 using Terraria.Graphics.Shaders;
 using Terraria.Utilities;
+using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria;
@@ -29,6 +_,9 @@
 	public ArmorShaderData shader;
 	public object customData;
 	public bool firstFrame;
+	
+	// Added by TML.
+	internal int realType = -1;
 
 	public static Dust NewDustPerfect(Vector2 Position, int Type, Vector2? Velocity = null, int Alpha = 0, Color newColor = default(Color), float Scale = 1f)
 	{
@@ -168,6 +_,8 @@
 			if (dust.type == 80)
 				dust.alpha = 50;
 
+			DustLoader.SetupDust(dust);
+
 			if (dust.type == 34 || dust.type == 35 || dust.type == 152) {
 				dust.velocity *= 0.1f;
 				dust.velocity.Y = -0.5f;
@@ -272,6 +_,9 @@
 
 	public static int dustWater()
 	{
+		if (Main.waterStyle >= Main.maxLiquidTypes)
+			return LoaderManager.Get<WaterStylesLoader>().Get(Main.waterStyle).GetSplashDust();
+
 		return Main.waterStyle switch {
 			2 => 98,
 			3 => 99,
@@ -301,6 +_,16 @@
 					continue;
 
 				dCount += 1f;
+
+				DustLoader.SetupUpdateType(dust);
+
+				ModDust modDust = DustLoader.GetDust(dust.type);
+
+				if (modDust != null && !modDust.Update(dust)) {
+					DustLoader.TakeDownUpdateType(dust);
+					continue;
+				}
+
 				if (dust.scale > 10f)
 					dust.active = false;
 
@@ -1639,7 +_,7 @@
 
 					Lighting.AddLight((int)(dust.position.X / 16f), (int)(dust.position.Y / 16f), num104 * 0.7f, num104, num104 * 0.8f);
 				}
-				else if (dust.type != 304) {
+				else if (dust.type != 304 && (modDust == null || !modDust.MidUpdate(dust))) {
 					dust.velocity.X *= 0.99f;
 				}
 
@@ -1864,6 +_,8 @@
 
 				if (dust.scale < num113)
 					dust.active = false;
+
+				DustLoader.TakeDownUpdateType(dust);
 			}
 			else {
 				dust.active = false;
@@ -1886,7 +_,15 @@
 	}
 
 	public Color GetAlpha(Color newColor)
 	{
+		ModDust modDust = DustLoader.GetDust(type);
+
+		if (modDust != null) {
+			Color? modColor = modDust.GetAlpha(this, newColor);
+			if (modColor.HasValue)
+				return modColor.Value;
+		}
+
 		float num = (float)(255 - alpha) / 255f;
 		switch (type) {
 			case 323:
